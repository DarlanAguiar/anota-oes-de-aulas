
--------- MÃO NA MASSA FUNÇES--------------------------

-- DROP TABLE aluno;
CREATE TABLE aluno (
    id SERIAL PRIMARY KEY,
	primeiro_nome VARCHAR(255) NOT NULL,
	ultimo_nome VARCHAR(255) NOT NULL,
	data_nascimento DATE NOT NULL
);

-- DROP TABLE categoria;
CREATE TABLE categoria (
    id SERIAL PRIMARY KEY,
	nome VARCHAR(255) NOT NULL UNIQUE
);

-- DROP TABLE curso;
CREATE TABLE curso (
    id SERIAL PRIMARY KEY,
	nome VARCHAR(255) NOT NULL,
	categoria_id INTEGER NOT NULL REFERENCES categoria(id)
);

-- DROP TABLE aluno_curso;
CREATE TABLE aluno_curso (
	aluno_id INTEGER NOT NULL REFERENCES aluno(id),
	curso_id INTEGER NOT NULL REFERENCES curso(id),
	PRIMARY KEY (aluno_id, curso_id)
);

------------------------inserindo valores
INSERT INTO aluno (primeiro_nome, ultimo_nome,data_nascimento) 
    VALUES ('Darlan', 'Aguiar', '1987-04-27');
INSERT INTO aluno (primeiro_nome, ultimo_nome,data_nascimento) 
    VALUES ('Mayara', 'Garcia', '1990-09-03');
INSERT INTO aluno (primeiro_nome, ultimo_nome,data_nascimento) 
    VALUES ('Dari', 'Aguiar', '1987-05-04');
INSERT INTO aluno (primeiro_nome, ultimo_nome,data_nascimento) 
    VALUES ('Theo', 'Aguiar', '2019-02-28');
INSERT INTO aluno (primeiro_nome, ultimo_nome,data_nascimento) 
    VALUES ('Maria', 'Gomes', '1962-06-06');
    
INSERT INTO categoria (nome) VALUES ('FrontEnd');   
INSERT INTO categoria (nome) VALUES ('BackEnd');   
INSERT INTO categoria (nome) VALUES ('FullStack');   
INSERT INTO categoria (nome) VALUES ('Design');   
 
INSERT INTO curso (nome, categoria_id) VALUES ('HTML', 1);
INSERT INTO curso (nome, categoria_id) VALUES ('CSS', 1);
INSERT INTO curso (nome, categoria_id) VALUES ('PHP', 2);
INSERT INTO curso (nome, categoria_id) VALUES ('Node', 2);
INSERT INTO curso (nome, categoria_id) VALUES ('Photoshop', 4);
INSERT INTO curso (nome, categoria_id) VALUES ('React', 1);
INSERT INTO curso (nome, categoria_id) VALUES ('Javascript', 3);

INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (1, 1);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (1, 2);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (2, 1);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (2, 4);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (3, 3);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (3, 2);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (4, 1);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (4, 3);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (5, 3);
INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (2, 3);
------------------------------------------------------------


SELECT * FROM aluno;
SELECT * FROM curso;
SELECT * FROM categoria;
SELECT * FROM aluno_curso;

-- Criando uma função que insira um cursos em um adeterminada categoria, só que passaremos para a função o nome do curso e não o ID
-- se uma categoria com este nome já existir utilizaromos este ide para a inserção,  
-- caso não exista uma cagoria com o nome então criaremos primeiro a categoria e depois o curso.

CREATE OR REPLACE FUNCTION cria_curso(nome_curso VARCHAR, nome_categoria VARCHAR) RETURNS void AS $$
    DECLARE
        id_categoria INTEGER;
    BEGIN        -- INTO add o id na variavel id_categoria.
        SELECT id INTO id_categoria FROM categoria WHERE nome = nome_categoria;
        IF NOT FOUND THEN --FOUND - Uma variável que informa se houve algum resultado produzido pela última query executada. 
                          -- IF NOT FOUND THEN(se nada encontrou nada , então)
            INSERT INTO categoria (nome) VALUES (nome_categoria) RETURNING id INTO id_categoria; --RETURNING-após inserir a categoria ele retorna o id desta categoria.
        END IF;
        INSERT INTO curso (nome, categoria_id) VALUES (nome_curso, id_categoria);
    END;
$$ LANGUAGE plpgsql;

SELECT cria_curso('PHP', 'Programação');
SELECT cria_curso('Java', 'Programação');

-- criar uma função para inserir instrutores com os seus salários.
-- se o salário inserido é maior do que a mádia, exibir e salvar uma mensagem informando que é maior que a média.
-- salvar também uma outra mensagem informando que Fulando recebe X% a mais que ciclano.
DROP
CREATE TABLE instrutor (
    id SERIAL PRiMARY KEY,
    nome VARCHAR(255),
    salario DECIMAL(10,2)  --da digitos e 2 casas após a vírgula;
);

CREATE TABLE mensagem_instrutores (
    id SERIAL PRIMARY KEY,
    informacao VARCHAR(255),
    momento_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP --caso eu não passe o valor o valor padrão é o momento atual;   
);

CREATE OR REPLACE FUNCTION cria_instrutor(nome_instrutor VARCHAR, salario_instrutor DECIMAL) RETURNS void AS $$
    DECLARE
        id_instrutor_inserido INTEGER;
        media_salarial DECIMAL;
        instrutores_recebem_menos INTEGER DEFAULT 0;
        total_instrutores INTEGER DEFAULT 0;
        salario DECIMAL;
        percentual DECIMAL(5,2);
    BEGIN
        SELECT AVG(instrutor.salario) from instrutor INTO media_salarial; -- buscando a media salarial - AVG - retorna uma média.
    
        INSERT INTO instrutor (nome, salario) VALUES (nome_instrutor, salario_instrutor) RETURNING id INTO id_instrutor_inserido; 
       
        IF salario_instrutor > media_salarial THEN
            INSERT INTO mensagem_instrutores (informacao) VALUES (nome_instrutor || ' recebe acima da média');
        END IF;
        
        FOR salario IN SELECT instrutor.salario FROM instrutor WHERE id != id_instrutor_inserido LOOP
            total_instrutores := total_instrutores +1;
            
            IF salario_instrutor > salario THEN -- se o salario do intrutor for maior que o salario que estou percorrendo agora.
                instrutores_recebem_menos := instrutores_recebem_menos +1;
            END IF;
        END LOOP;
        
        percentual := (instrutores_recebem_menos::DECIMAL / total_instrutores::DECIMAL) *100; --o decimal é pq o postgres vai tentar ajudar pois 3/10=0.3 
                                                                                             -- sem o decimal o postgres arredondaria para 0 e 0 * 100 = 0
        INSERT INTO mensagem_instrutores (informacao) VALUES (nome_instrutor || ' recebe mais do que ' || percentual || '% da grade de intrutores'); 
    END;
$$ LANGUAGE plpgsql;

SELECT cria_instrutor('nina2', 600);
SELECT cria_instrutor('nina2', 601);
SELECT cria_instrutor('Maria', 99);
SELECT cria_instrutor('Maria2', 100);

SELECT * FROM instrutor;
SELECT * FROM mensagem_instrutores;
SELECT * FROM instrutor;

--------------------------TRIGGER

-- é uma gatilho usado quando determinada tabela é alterada por ex: vamos mudar a função cria_intrutor para ser uma TRIGGER.
-- pors esta funçao adiciona um intrutor e um salário, o que é possivel tabem fazer sem parrasr por esta função, então quando inserrirmos um instrutor manualmente em uma tabela esta função será chamada altomaticamente. 
-- lembrando que ele não pode receber parâmetro e seu retorno deve ser um TRIGGER.

DROP FUNCTION cria_instrutor;
CREATE OR REPLACE FUNCTION cria_instrutor() RETURNS TRIGGER AS $$
    DECLARE
        --id_instrutor_inserido INTEGER;
        media_salarial DECIMAL;
        instrutores_recebem_menos INTEGER DEFAULT 0;
        total_instrutores INTEGER DEFAULT 0;
        salario DECIMAL;
        percentual DECIMAL(5,2);
    BEGIN
		SELECT AVG(instrutor.salario) from instrutor INTO media_salarial WHERE id != NEW.id; -- buscando a media salarial - AVG - retorna uma média.
    
        --INSERT INTO instrutor (nome, salario) VALUES (nome_instrutor, salario_instrutor) RETURNING id INTO id_instrutor_inserido; 
       
        IF NEW.salario > media_salarial THEN
            INSERT INTO mensagem_instrutores (informacao) VALUES (NEW.nome || ' recebe acima da média');
        END IF;
        
        FOR salario IN SELECT instrutor.salario FROM instrutor WHERE id != NEW.id LOOP
            total_instrutores := total_instrutores +1;
            
            IF NEW.salario > salario THEN -- se o salario do intrutor for maior que o salario que estou percorrendo agora.
                instrutores_recebem_menos := instrutores_recebem_menos +1;
				-- RETURN NULL;  --cancela as mudans que seriam feitas na tabela que chamou este TRIGGER.
            END IF;
        END LOOP;
        
        percentual := (instrutores_recebem_menos::DECIMAL / total_instrutores::DECIMAL) *100; --o decimal é pq o postgres vai tentar ajudar pois 3/10=0.3 
                                                                                             -- sem o decimal o postgres arredondaria para 0 e 0 * 100 = 0
        INSERT INTO mensagem_instrutores (informacao) VALUES (NEW.nome || ' recebe mais do que ' || percentual || '% da grade de intrutores');
		RETURN NEW;  -- retorno de um TRIGGER é obrigatório.
    END;
$$ LANGUAGE plpgsql;

DROP TRIGGER cria_mensagem_intrutores ON instrutor;
CREATE TRIGGER cria_mensagem_intrutores BEFORE INSERT ON instrutor --cria TRIGGER nomeDoTrigger que executa após uma inserção na tabela INTRUTOR.
     FOR EACH ROW EXECUTE FUNCTION cria_instrutor(); -- para cada nova linha (registro) execute a função cria_instrutor()
	 
INSERT INTO instrutor (nome, salario) VALUES ('nome TRIGGER4', 400); -- insercção comum na tabela instrutor.

SELECT * FROM instrutor;
SELECT * FROM mensagem_instrutores;


----------------------DESAFIO 

-- remover o trigger anterior
-- criar um trigger no BEFORE 
-- caso o salário a ser adicionado na tabela instrutor seja maior de 100% dos outros professores não permitir e 
-- atualizar o salario a ser inserido para um valor igual ao valor do maior salario da tabela.


CREATE TRIGGER verifica_salario_instrutores BEFORE INSERT ON instrutor
     FOR EACH ROW EXECUTE FUNCTION verifica_salario();
	 
CREATE OR REPLACE FUNCTION verifica_salario() RETURNS TRIGGER AS $$
    DECLARE
		maior_salario DECIMAL(10,2);
    BEGIN
		SELECT MAX(instrutor.salario) from instrutor INTO maior_salario; -- buscando a maior salario - MAX - retorna o maior.
       
        IF NEW.salario > maior_salario THEN
            NEW.salario := maior_salario;  -- atribuindo o maior salario ta tabela ao salario que está sendo inserido.
        END IF;
        
        RETURN NEW;  -- retorno de um TRIGGER é obrigatório.
		--RETURN ROW(NEW.id, NEW.nome, )::instrutor;  retornando valores que é do tipo instrutor
		--NEW.salario := 
    END;
$$ LANGUAGE plpgsql;

	 
INSERT INTO instrutor (nome, salario) VALUES ('PPA MAIOR', 4000);


-------------------ERROS

CREATE OR REPLACE FUNCTION cria_instrutor() RETURNS TRIGGER AS $$
    DECLARE
        --id_instrutor_inserido INTEGER;
        media_salarial DECIMAL;
        instrutores_recebem_menos INTEGER DEFAULT 0;
        total_instrutores INTEGER DEFAULT 0;
        salario DECIMAL;
        percentual DECIMAL(5,2);
    BEGIN
		SELECT AVG(instrutor.salario) from instrutor INTO media_salarial WHERE id != NEW.id; 
       
        IF NEW.salario > media_salarial THEN
            INSERT INTO mensagem_instrutores (informacao) VALUES (NEW.nome || ' recebe acima da média');
        END IF;
        
        FOR salario IN SELECT instrutor.salario FROM instrutor WHERE id != NEW.id LOOP
            total_instrutores := total_instrutores +1;
            
            IF NEW.salario > salario THEN 
                instrutores_recebem_menos := instrutores_recebem_menos +1;
            END IF;
        END LOOP;
        
        percentual := (instrutores_recebem_menos::DECIMAL / total_instrutores::DECIMAL) *100; 
                                                                                             
        INSERT INTO mensagem_instrutores (informacao, erro) VALUES (NEW.nome || ' recebe mais do que ' || percentual || '% da grade de intrutores', '');
		                                       -- erro aqui                                                                                      e aqui.
									   
		EXCEPTION
    		WHEN undefined_column THEN
        		RETURN NEW;
		
		RETURN NEW; 
    END;
$$ LANGUAGE plpgsql;
	 
INSERT INTO instrutor (nome, salario) VALUES ('testeERRO', 4000);
SELECT * FROM instrutor;
SELECT * FROM mensagem_instrutores;

-------------------ERROS RAISE:

CREATE OR REPLACE FUNCTION cria_instrutor() RETURNS TRIGGER AS $$
    DECLARE
        --id_instrutor_inserido INTEGER;
        media_salarial DECIMAL;
        instrutores_recebem_menos INTEGER DEFAULT 0;
        total_instrutores INTEGER DEFAULT 0;
        salario DECIMAL;
        percentual DECIMAL(5,2);
    BEGIN
		SELECT AVG(instrutor.salario) from instrutor INTO media_salarial WHERE id != NEW.id; 
       
        IF NEW.salario > media_salarial THEN
            INSERT INTO mensagem_instrutores (informacao) VALUES (NEW.nome || ' recebe acima da média');
        END IF;
        
        FOR salario IN SELECT instrutor.salario FROM instrutor WHERE id != NEW.id LOOP
            total_instrutores := total_instrutores +1;
            
            IF NEW.salario > salario THEN 
                instrutores_recebem_menos := instrutores_recebem_menos +1;
            END IF;
        END LOOP;
        
        percentual := (instrutores_recebem_menos::DECIMAL / total_instrutores::DECIMAL) *100; 
                                                                                             
        INSERT INTO mensagem_instrutores (informacao, erro) VALUES (NEW.nome || ' recebe mais do que ' || percentual || '% da grade de intrutores', '');
		                                       -- erro aqui                                                                                      e aqui.
									   
		EXCEPTION
    		WHEN undefined_column THEN
			RAISE NOTICE 'algo de errado ocorreu';
        	RAISE EXCEPTION 'erro complicado de resolver';
				--RETURN NEW;
		
		RETURN NEW; 
    END;
$$ LANGUAGE plpgsql;
	 
INSERT INTO instrutor (nome, salario) VALUES ('testeERRO2', 4000);
SELECT * FROM instrutor;
SELECT * FROM mensagem_instrutores;

-------------------ASSERT 


CREATE TRIGGER verifica_salario_instrutores BEFORE INSERT ON instrutor
     FOR EACH ROW EXECUTE FUNCTION verifica_salario();
	 
CREATE OR REPLACE FUNCTION verifica_salario() RETURNS TRIGGER AS $$
    DECLARE
		maior_salario DECIMAL(10,2);
    BEGIN
		SELECT MAX(instrutor.salario) from instrutor INTO maior_salario; -- buscando a maior salario - MAX - retorna o maior.
       
        -- IF NEW.salario > maior_salario THEN
           --NEW.salario := maior_salario;  -- atribuindo o maior salario ta tabela ao salario que está sendo inserido.
        -- END IF;
		
		ASSERT NEW.salario < maior_salario, 'intrutores novos não podem receber mais que o intrutor melhor pago';
        
        RETURN NEW;  -- retorno de um TRIGGER é obrigatório.
		
    END;
$$ LANGUAGE plpgsql;

	 
INSERT INTO instrutor (nome, salario) VALUES ('assert2', 3003);
SELECT * FROM instrutor;
SELECT * FROM mensagem_instrutores;


-------------------DEBUG

CREATE OR REPLACE FUNCTION cria_instrutor() RETURNS TRIGGER AS $$
    DECLARE
        --id_instrutor_inserido INTEGER;
        media_salarial DECIMAL;
        instrutores_recebem_menos INTEGER DEFAULT 0;
        total_instrutores INTEGER DEFAULT 0;
        salario DECIMAL;
        percentual DECIMAL(5,2);
    BEGIN
		SELECT AVG(instrutor.salario) from instrutor INTO media_salarial WHERE id != NEW.id; 
       
        IF NEW.salario > media_salarial THEN
            INSERT INTO mensagem_instrutores (informacao) VALUES (NEW.nome || ' recebe acima da média');
        END IF;
        
        FOR salario IN SELECT instrutor.salario FROM instrutor WHERE id != NEW.id LOOP
            total_instrutores := total_instrutores +1;
			
			RAISE NOTICE 'salario inserido: %, salario do intrutor existente: %', NEW.salario, salario;
            
            IF NEW.salario > salario THEN 
                instrutores_recebem_menos := instrutores_recebem_menos +1;
            END IF;
        END LOOP;
        
        percentual := (instrutores_recebem_menos::DECIMAL / total_instrutores::DECIMAL) *100; 
                                                                                             
        INSERT INTO mensagem_instrutores (informacao) VALUES (NEW.nome || ' recebe mais do que ' || percentual || '% da grade de intrutores');
		                                       -- erro aqui                                                                                      e aqui.
		
		RETURN NEW; 
    END;
$$ LANGUAGE plpgsql;
	 
INSERT INTO instrutor (nome, salario) VALUES ('raise', 200);
SELECT * FROM instrutor;
SELECT * FROM mensagem_instrutores;


-----------------------------------CURSOR
-- CRIANDO O CURSOR
CREATE FUNCTION salario_maior_que_0(id_instrutor INTEGER) RETURNS refcursor AS $$
	DECLARE                                          -- retorno é do tipo cursor.
	cursor_salarios refcursor; --definindo a variavel salario é do tipo cursor
	BEGIN
	    -- aqui eu abro o cursor dizendo que 
		OPEN cursor_salarios FOR SELECT instrutor.salario FROM instrutor
									WHERE id !=  id_instrutor AND instrutor.salario > 0;
		
		RETURN cursor_salarios; -- retornando o cursor
	END;

$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION cria_instrutor() RETURNS TRIGGER AS $$
    DECLARE
        --id_instrutor_inserido INTEGER;
        media_salarial DECIMAL;
        instrutores_recebem_menos INTEGER DEFAULT 0;
        total_instrutores INTEGER DEFAULT 0;
        salario DECIMAL;
        percentual DECIMAL(5,2);
		cursor_salarios refcursor;
    BEGIN
		SELECT AVG(instrutor.salario) from instrutor INTO media_salarial WHERE id != NEW.id; 
       
        IF NEW.salario > media_salarial THEN
            INSERT INTO mensagem_instrutores (informacao) VALUES (NEW.nome || ' recebe acima da média');
        END IF;
        --UTILIZANDO O CURSOR
		SELECT salario_maior_que_0(NEW.id) INTO cursor_salarios; -- busco o cursor e adiciono o seu 
		                                                         --retorno a variável cursor_salarios
        LOOP
			FETCH cursor_salarios INTO salario; -- para cada cursor que tem o valor de um salario 
			                                    -- eu adiciono este valor a variável salario.
				EXIT WHEN NOT FOUND;  -- condição de parada do LOOP, quando o cursor chegar ao fim.
			
			
            total_instrutores := total_instrutores +1;
            
            IF NEW.salario > salario THEN 
                instrutores_recebem_menos := instrutores_recebem_menos +1;
            END IF;
        END LOOP;
        
        percentual := (instrutores_recebem_menos::DECIMAL / total_instrutores::DECIMAL) *100; 
                                                                                             
        INSERT INTO mensagem_instrutores (informacao) VALUES (NEW.nome || ' recebe mais do que ' || percentual || '% da grade de intrutores');
		                                       -- erro aqui                                                                                      e aqui.
		
		RETURN NEW; 
    END;
$$ LANGUAGE plpgsql;
	 
INSERT INTO instrutor (nome, salario) VALUES ('raise2', 303);
SELECT * FROM instrutor;
SELECT * FROM mensagem_instrutores;



-------------------------------------------_DO
DO $$
	DECLARE
	cursor_salarios refcursor;
	salario DECIMAL;
	total_instrutores INTEGER DEFAULT 0;
	instrutores_recebem_menos INTEGER DEFAULT 0;
	percentual DECIMAL(5,2);
	BEGIN
	 --UTILIZANDO O CURSOR
		SELECT salario_maior_que_0(2) INTO cursor_salarios; -- busco o cursor e adiciono o seu 
		                                                         --retorno a variável cursor_salarios
        LOOP
			FETCH cursor_salarios INTO salario; -- para cada cursor que tem o valor de um salario 
			                                    -- eu adiciono este valor a variável salario.
				EXIT WHEN NOT FOUND;  -- condição de parada do LOOP, quando o cursor chegar ao fim.
			
			
            total_instrutores := total_instrutores +1;
            
            IF 600 > salario THEN 
                instrutores_recebem_menos := instrutores_recebem_menos +1;
            END IF;
        END LOOP;
		
		 percentual := (instrutores_recebem_menos::DECIMAL / total_instrutores::DECIMAL) *100; 
		 RAISE NOTICE 'PERCENTUAL = % %%', percentual;
	END;
$$;




